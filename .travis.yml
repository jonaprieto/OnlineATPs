# This file has been generated -- see https://github.com/hvr/multi-ghc-travis
language: c
sudo: false

cache:
  directories:
    - $HOME/.cabsnap
    - $HOME/.cabal/packages

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.tar

matrix:
  include:
    - env: CABAL_VER=1.22 GHC_VER=7.6.3
      addons: {apt:
        { packages : [
            alex-3.1.7
          , cabal-install-1.22
          , ghc-7.6.3
          , happy-1.19.5
          ]
          , sources: [hvr-ghc]}}
    - env: CABAL_VER=1.22 GHC_VER=7.8.4
      addons: {apt:
        { packages : [
            alex-3.1.7
          , cabal-install-1.22
          , ghc-7.8.4
          , happy-1.19.5
          ]
          , sources: [hvr-ghc]}}
    - env: CABAL_VER=1.22 GHC_VER=7.10.3
      addons: {apt:
        { packages : [
            alex-3.1.7
          , cabal-install-1.22
          , ghc-7.10.3
          , happy-1.19.5
          ]
          , sources: [hvr-ghc]}}
    - env: CABAL_VER=1.24 GHC_VER=8.0.1
      addons: {apt:
        { packages : [
            alex-3.1.7
          , cabal-install-1.24
          , ghc-8.0.1
          , happy-1.19.5
          ]
          , sources: [hvr-ghc]}}
    - env: CABAL_VER=1.24 GHCVER=8.0.2
      compiler: ": #GHC 8.0.2"
      addons: {apt:
        { packages : [
            alex-3.1.7
          , cabal-install-1.24
          , ghc-8.0.2
          , happy-1.19.5
          ]
          , sources: [hvr-ghc]}}


before_install:
 - unset CC
 - export MY_HOME=${HOME}/build/jonaprieto
 - mkdir ${MY_HOME}/bin
 - export PATH=${MY_HOME}/bin:/opt/ghc/${GHC_VER}/bin:/opt/cabal/${CABAL_VER}/bin:/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:${PATH}


install:
 - cabal --version
 - cabal update
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - if [ -f $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz ];
   then
     zcat $HOME/.cabal/packages/hackage.haskell.org/00-index.tar.gz >
          $HOME/.cabal/packages/hackage.haskell.org/00-index.tar;
   fi
 - travis_retry cabal update -v
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - cabal install --force-reinstalls --only-dependencies --enable-tests --enable-benchmarks --dry -v > installplan.txt
 - sed -i -e '1,/^Resolving /d' installplan.txt; cat installplan.txt

# check whether current requested install-plan matches cached package-db snapshot
 - if diff -u installplan.txt $HOME/.cabsnap/installplan.txt;
   then
     echo "cabal build-cache HIT";
     rm -rfv .ghc;
     cp -a $HOME/.cabsnap/ghc $HOME/.ghc;
     cp -a $HOME/.cabsnap/lib $HOME/.cabsnap/share $HOME/.cabsnap/bin $HOME/.cabal/;
   else
     echo "cabal build-cache MISS";
     rm -rf $HOME/.cabsnap;
     mkdir -p $HOME/.ghc $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin;
     cabal install --force-reinstalls --only-dependencies --enable-tests --enable-benchmarks;
   fi

# snapshot package-db on cache miss
 - if [ ! -d $HOME/.cabsnap ];
   then
      echo "snapshotting package-db to build-cache";
      mkdir $HOME/.cabsnap;
      cp -a $HOME/.ghc $HOME/.cabsnap/ghc;
      cp -a $HOME/.cabal/lib $HOME/.cabal/share $HOME/.cabal/bin installplan.txt $HOME/.cabsnap/;
   fi
 - make install-fix-whitespace
 - cabal install hlint
 - cabal install shelltestrunner

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 # - cabal check
 - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cd dist && cabal install --force-reinstalls "$SRC_TGZ")
 - make tests

branches:
  only:
    - master

# EOF
